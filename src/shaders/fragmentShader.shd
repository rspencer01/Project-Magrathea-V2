#version 130
in vec4 ShadowCoord;
in vec4 col;
out vec4 FragColor;
in vec2 tex;
in vec4 texShades;
in vec3 normal;
in vec3 camPos;
in vec3 pos;
uniform sampler2D shadowTexture;
uniform sampler2D otherTexture;
uniform vec3 sunDirection;
uniform vec3 cameraPos;
uniform float sunIntensity;
uniform float shinyness;
void main()
{ 

  // This will eventually be parameters
  float ambient = 0.2;
  
  
  float sunlight = sunIntensity;
  // 16 samples per pixel.
  float diff = (sunlight-ambient)/49.0;
  if (diff<0)
  	diff = 0;
  float shadow = 1;
  
  // Test if point is inside the shadow render area...
  if ((ShadowCoord.x>0  && ShadowCoord.x<1)&&
  	   (ShadowCoord.y>0  && ShadowCoord.y<1))
  {
  	float y,x;
  	
  	for (y = -1.5 ; y <=1.5 ; y+=0.5)
			for (x = -1.5 ; x <=1.5 ; x+=0.5)
  		 	if (texture(shadowTexture,ShadowCoord.xy+vec2(x,y)/10000).z < ShadowCoord.z-0.0001)
  				shadow -= diff;
  }
  
  // A color for the texture
  vec4 otherTexFrag = vec4(0);
  
  // Determine if the multi-texture mode is disabled
  if (texShades.x<0)
    otherTexFrag = texture(otherTexture,tex);
  // Otherwise, sample the multi-texture.
  else
  {
    otherTexFrag += texShades.x * texture(otherTexture,mod(tex,vec2(1.0))/2              );
    otherTexFrag += texShades.y * texture(otherTexture,mod(tex,vec2(1.0))/2+vec2(0  ,0.5));
    otherTexFrag += texShades.z * texture(otherTexture,mod(tex,vec2(1.0))/2+vec2(0.5,0)  );
    otherTexFrag += texShades.w * texture(otherTexture,mod(tex,vec2(1.0))/2+vec2(0.5,0.5));
  }
  

  float vis = 0;
  
  
  float spec = 0;
  vec3 incidenceVector = -normalize(sunDirection);
  vec3 reflectionVector = normalize(reflect(incidenceVector,normal));
  vec3 surfaceToCamera = normalize(cameraPos - pos);
  spec = pow(max(0,dot(surfaceToCamera,reflectionVector)),1.0/shinyness);
  
  vis += ambient;
  vis += clamp(dot(normal,sunDirection),0,0.7);
  vis += spec;
    
  // The transparancy is taken straight from the texture 
  FragColor =  vec4(vis * shadow * col.xyz * otherTexFrag.xyz , col.w * otherTexFrag.w); 
}
