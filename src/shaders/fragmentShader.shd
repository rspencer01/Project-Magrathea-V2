#version 140
in vec4 gsShadowCoord;
in vec4 gsColour;
in vec2 gsTexcoord;
in vec4 gsTexShades;
in vec3 gsNormal;
in vec3 gsPosition;
in float gsDoTexture;

out vec4 FragColor;


layout(shared)uniform frameData
{
  vec4 frameColour;  
  mat4x4 transformationMatrix;
  mat4x4 projectionMatrix;  
  mat4x4 lightTransformMatrix;
  mat4x4 lightProjectionMatrix;
  vec4 sunDirection;  
  vec4 cameraPos;
  vec4 fogColour;
  float isShadow;
  float isReflection;
  float sunIntensity;
  float fog;
  float doLighting;
  float cullLevel;
  int gameTime;
  int viewWidth;
  int viewHeight;
};

layout(shared)uniform objectData
{
  mat4x4 objectMatrix;
  vec4 objectColour; 
  float shinyness;  
  // Object type of 1 indicates water
  int objectType;
  int isGrassy;
};
uniform sampler2D shadowTexture;
uniform sampler2D otherTexture;
uniform sampler2D waterTexture;


//This code is not mine.  This should be rewritten.  It belongs to Stefan Gustavson (stegu@itn.liu.se) 2004-12-05
//
// Description : Array and textureless GLSL 2D/3D/4D simplex
// noise functions.
// Author : Ian McEwan, Ashima Arts.
// Maintainer : ijm
// Lastmod : 20110822 (ijm)
// License : Copyright (C) 2011 Ashima Arts. All rights reserved.
// Distributed under the MIT License. See LICENSE file.
// https://github.com/ashima/webgl-noise
//

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  {
  const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i = floor(v + dot(v, C.yyy) );
  vec3 x0 = v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  // x0 = x0 - 0.0 + 0.0 * C.xxx;
  // x1 = x0 - i1 + 1.0 * C.xxx;
  // x2 = x0 - i2 + 2.0 * C.xxx;
  // x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3 ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
  }

float pderivx(vec3 ps)
{
  vec3 dx = vec3(0.01,0.0,0.0);
  float dp = snoise(ps+dx) - snoise(ps);
  return dp/length(dx);
}

float pderivy(vec3 ps)
{
  vec3 dy = vec3(0.0,0.01,0.0);
  float dp = snoise(ps+dy) - snoise(ps);
  return dp/length(dy);
}




void main()
{ 
  // Handle water
  if (objectType==1)
  {
    if (isShadow>0.5)
      discard;
	vec3 norm =- normalize(cross(
	               vec3(1.0,pderivx(vec3(gsPosition.xz,gameTime/1000.0)),0.0),
				   vec3(0.0,pderivy(vec3(gsPosition.xz,gameTime/1000.0)),1.0)));
    float ambient = 0.2;
    float sunlight = sunIntensity;
    // Get the reflective component
	vec2 screenTexCoord = gl_FragCoord.xy / vec2(viewWidth,viewHeight);
	vec3 flatNormal = vec3(norm.x,0,norm.z);
	vec4 screenOffset = normalize(projectionMatrix * transformationMatrix * vec4(flatNormal,1))*length(flatNormal);
	
	
	vec4 reflectiveFrag = texture(waterTexture,screenTexCoord+screenOffset.xy/20);
    // A color for the texture
	
    vec4 otherTexFrag = texture(otherTexture,gsTexcoord);

    float vis = 0.6+0*clamp(sunIntensity+ambient,0,1);
  
  
    float spec = 0;
    vec3 incidenceVector = -normalize(sunDirection.xyz);
    vec3 reflectionVector = normalize(reflect(incidenceVector,gsNormal));
    vec3 surfaceToCamera = normalize(cameraPos.xyz - gsPosition);
    spec = pow(max(0,dot(surfaceToCamera,reflectionVector)),1.0/shinyness) *pow(sunlight,0.2);
  
    vis += 0.2*clamp(dot(norm,sunDirection.xyz)*sunIntensity,0,1);
    vis = clamp(vis,0,1);
    //vis += spec;

    float fogLevel = clamp(length(cameraPos.xyz - gsPosition)/fog,0,1);
  
	FragColor =  vec4( vis *reflectiveFrag.xyz * vec3(0.7,1,1),gsColour.w);
	return;
  }
  if (doLighting>0.5)
    if (gsPosition.y<cullLevel+0.05) 
      discard;
  if (isShadow>0.5)
  {
    FragColor = texture(otherTexture,gsTexcoord);
	if (FragColor.w < 0.1)
	  discard;
    return;
  }
  float ambient = 0.2;
  float sunlight = sunIntensity;
  // 16 samples per pixel.
  float diff = 0.8/49.0 * sunlight;
  float shadow = 1;
  
  // Test if point is inside the shadow render area...
  if ((gsShadowCoord.x>0  && gsShadowCoord.x<1)&&
      (gsShadowCoord.y>0  && gsShadowCoord.y<1))
  {
    float y,x;
    for (y = -1.5 ; y <=1.5 ; y+=0.5)
      for (x = -1.5 ; x <=1.5 ; x+=0.5)
        if (texture(shadowTexture,gsShadowCoord.xy+vec2(x,y)/10000).z < gsShadowCoord.z-0.0001)
          shadow -= diff;
  }
  
  // A color for the texture
  vec4 otherTexFrag = vec4(1);
  
  if (gsDoTexture > 0.5)
  {
	  // Determine if the multi-texture mode is disabled
	  if (gsTexShades.x<0)
		otherTexFrag = texture(otherTexture,gsTexcoord);
	  // Otherwise, sample the multi-texture.
	  else
	  {
		otherTexFrag = gsTexShades.x * texture(otherTexture,mod(gsTexcoord,vec2(1.0))/2              );
		otherTexFrag += gsTexShades.y * texture(otherTexture,mod(gsTexcoord,vec2(1.0))/2+vec2(0  ,0.5));
		otherTexFrag += gsTexShades.z * texture(otherTexture,mod(gsTexcoord,vec2(1.0))/2+vec2(0.5,0)  );
		otherTexFrag += gsTexShades.w * texture(otherTexture,mod(gsTexcoord,vec2(1.0))/2+vec2(0.5,0.5));
	  }
  }
  

  float vis = 0.2+0*clamp(sunIntensity+ambient,0,1);
  
  
  float spec = 0;
  vec3 incidenceVector = -normalize(sunDirection.xyz);
  vec3 reflectionVector = normalize(reflect(incidenceVector,gsNormal));
  vec3 surfaceToCamera = normalize(cameraPos.xyz - gsPosition);
  spec = pow(max(0,dot(surfaceToCamera,reflectionVector)),1.0/shinyness) *pow(sunlight,0.2);
  
  vis += 0.8*clamp(dot(gsNormal,sunDirection.xyz)*sunIntensity,0,1);
  vis = clamp(vis,0,1);
  vis += spec;

  float fogLevel = clamp(length(cameraPos.xyz - gsPosition)/fog,0,1);
  
  if (objectType==1)
    shadow = 1;
  // The transparancy is taken straight from the texture 

  if (doLighting>0.5)
	FragColor =  vec4(vis * shadow * gsColour.xyz * otherTexFrag.xyz * (1-fogLevel) + fogLevel*fogColour.xyz, gsColour.w * otherTexFrag.w); 
  else
	FragColor =  gsColour * otherTexFrag;
}
