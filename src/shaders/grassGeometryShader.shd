#version 150
#extension GL_EXT_geometry_shader4 : enable

layout (points) in;
layout (triangle_strip) out;
layout(max_vertices = 28) out;

layout(shared)uniform frameData
{
  vec4 frameColour;  
  mat4x4 transformationMatrix;
  mat4x4 projectionMatrix;  
  mat4x4 lightTransformMatrix;
  mat4x4 lightProjectionMatrix;
  vec4 sunDirection;  
  vec4 cameraPos;
  vec4 fogColour;
  float isShadow;
  float isReflection;
  float sunIntensity;
  float fog;
  float doLighting;
  float cullLevel;
  int gameTime;
  int viewWidth;
  int viewHeight;
};
in vec4 vsColour[];
in float vsGrassiness[];
out vec3 gsPosition;
out vec3 gsNormal;
out vec4 gsColour;

float rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}

vec3 grass1 [7] = vec3[7] ( vec3(0,0,0),
                            vec3(0.1,0,0),
							vec3(0.055,0.3,0.02),
							vec3(0.13,0.3,0.03),
							
							vec3(0.12,0.47,0.07),
							vec3(0.17,0.45,0.08),
							vec3(0.2,0.6,0.12));
vec3 norms1 [7] = vec3[7] ( normalize(vec3(0,0,1)),
                            normalize(vec3(0,0.05,1)),
							normalize(vec3(0,0.1,1)),
							normalize(vec3(0,0.1,1)),
							
							normalize(vec3(0,0.5,0.9)),
							normalize(vec3(0,0.5,0.8)),
							normalize(vec3(0,0.5,0.5)));
vec3 grass2 [7] = vec3[7] ( vec3(-0.06,0.17,0.25),
                            vec3(0.02,0.12,0.11),
							vec3(0.0,0.0,0.0),
							vec3(0.1,0.0,0.0),
							
							vec3(0.1,0.16,-0.07),
							vec3(0.17,0.15,-0.09),
							vec3(0.25,0.25,-0.22));
vec3 norms2 [7] = vec3[7] ( normalize(vec3(0,0.2,-1)),
                            normalize(vec3(0,0.1,-1)),
							normalize(vec3(0,0,1)),
							normalize(vec3(0,0,1)),
							
							normalize(vec3(0,1,1)),
							normalize(vec3(0,1,1)),
							normalize(vec3(0,3,1)));
							

void makeGrass(vec3 pos,float height)
{
  vec3 grass [] = grass1;
  vec3 norms [] = norms1;
  
  float yRot = rand(pos.xz)*3.1415;
  mat3 rot = mat3(cos(yRot),0,-sin(yRot),
                  0,1,0,
				  sin(yRot),0,cos(yRot));
  float xRot = 3.1415*0.4*(rand(pos.xz+vec2(1))/2-0.25);
  rot = rot * mat3(1.0,0.0,0.0,
                  0.0,cos(xRot),-sin(xRot),
				  0.0,sin(xRot),cos(xRot));
				  
  
  gsColour = vsColour[0];
  
  if (height < 0.4)
  {
	grass = grass2;
	norms = norms2;
	rot *= 1.5;
  }
  for (int i = 0; i<7;i++)
  {
    gsPosition = pos + height*rot*grass[i];
	gsNormal = rot*norms[i];
	if (isReflection>0.5)
	  gsPosition.y = 2*cullLevel-gsPosition.y;
	if (isShadow>0.5)
	  gl_Position = lightProjectionMatrix * lightTransformMatrix * vec4(gsPosition,1);
	else
	  gl_Position = projectionMatrix * transformationMatrix * vec4(gsPosition,1);
    EmitVertex();
  }
  EndPrimitive();
}

void main()
{
  if (length(gl_PositionIn[0].xyz-cameraPos.xyz) < 100)
  {
    if (vsGrassiness[0]<0.1)
	  return;
    for (int i = 0;i<4;i++)
    {
      vec3 off = vec3(rand(gl_PositionIn[0].xz+vec2(i,i+1)),0,
	                  rand(gl_PositionIn[0].xz+vec2(i/1000,i+1)));
	  float height = vsGrassiness[0]+0.1*rand(gl_PositionIn[0].xz-off.xz);
      makeGrass(gl_PositionIn[0].xyz+off,height);
    }
  }
}
